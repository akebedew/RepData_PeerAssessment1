proportionAR
# NATENVIR "About Right" Proportions of Female and Male
proportionARF= nrow(subset(AboutRight, AboutRight$SEX == "Female"))/TotalNumF
proportionARM =nrow(subset(AboutRight, AboutRight$SEX == " Male"))/TotalNumM
proportionARF
proportionARM
MmaleTLMinusPfemalAR= proportionARM - proportionARF
MmaleTLMinusPfemalAR
#Calculate Standard Error for "About Right" response
SEAR =sqrt((((proportionAR)*(1-proportionAR))/(TotalNumF))+(((proportionAR)*(1-proportionAR))/(TotalNumM)))
SEAR
#Calculate z-Score for "About Right" response
zscoreAR = (MmaleTLMinusPfemalAR-0)/SEAR
zscoreAR
ProbAR = 2*pnorm(-abs(zscoreAR))
ProbAR
NatenvirNames<- c("Too Little", "About Right", "Too much")
ProportionNames
Results <- read.csv("G:/Data Analysis and Statistical Inference/Project/projectdataCRes.csv",header=TRUE)
Results
###### CHI SQUARE tets
proportion = nrow(subset(MyData, MyData$NATENVIR == "About Right"))/nrow(MyData)
proportion
inference(MyData$NATENVIR, MyData$SEX, est = "proportion", type = "ht", method = "theoretical", success = "maleandfemale")
# Load data and Inference Function
load(url("http://s3.amazonaws.com/assets.datacamp.com/course/dasi/inference.Rdata"))
load(url("http://bit.ly/dasi_gss_data"))
# Extract Sex, Natenvir, and Age variables from data
NATENVIR=gss$natenvir
SEX=gss$sex
AGE=gss$age
#Read data from file
MyData <- read.csv("G:/Data Analysis and Statistical Inference/Project/projectdatamodNoNa.csv",header=TRUE)
MyData_Age <- read.csv("G:/Data Analysis and Statistical Inference/Project/projectdatamodage.csv",header=TRUE)
head(MyData_Age)
#Take the subset of Too Little Response
TLittle =subset(MyData, MyData$NATENVIR == "Too Little")
TLittleFemale= subset(TLittle, TLittle$SEX == "Female")
# Calculate the proportion of females from the 'TLittle' subset:
proportionF = nrow(TLittleFemale)/nrow(TLittle)
proportionF
#
#Take the subset of Too Little Response
TLittle =subset(MyData, MyData$NATENVIR == "Too Little")
TLittleMale= subset(TLittle, TLittle$SEX == " Male")
# Calculate the proportion of males from the 'TLittle' subset:
proportionM = nrow(TLittleMale)/nrow(TLittle)
proportionM
#
summary(MyData_Age$AGE)
dchisq(129.9193, 2)
names(MyData)
# Proportion test
table(MyData$NATENVIR, MyData$SEX)
prop.test(table(MyData$NATENVIR, MyData$SEX), correct=FALSE)
levels(MyData$NATENVIR)
levels(MyData$SEX)
#attach(MyData)
mytable=(table(MyData))
#mytable
testtable= data.frame(mytable)
#testtable
#names(testtable)
#myNatEnvir = MyData$NATENVIR
#
nrow(MyData)
# Subset data by NATENVIR
TooLittle= subset(MyData, MyData$NATENVIR == "Too Little")
TooMuch= subset(MyData, MyData$NATENVIR == "Too much")
AboutRight= subset(MyData, MyData$NATENVIR == "About Right")
head(TooLittle)
# Number of Females
FemaleNumberTL= nrow(subset(TooLittle, TooLittle$SEX == "Female"))
FemaleNumberTM= nrow(subset(TooMuch, TooMuch$SEX == "Female"))
FemaleNumberAR=nrow(subset(AboutRight, AboutRight$SEX == "Female"))
TotalNumF= FemaleNumberTL + FemaleNumberTM + FemaleNumberAR
TotalNumF
# Number of Males
MaleNumberTL= nrow(subset(TooLittle, TooLittle$SEX == " Male"))
MaleNumberTL
MaleNumberTM= nrow(subset(TooMuch, TooMuch$SEX == " Male"))
MaleNumberAR=nrow(subset(AboutRight, AboutRight$SEX == " Male"))
TotalNumM= MaleNumberTL + MaleNumberTM + MaleNumberAR
TotalNumM
# NATENVIR "Too Little" Proportions of Total
TooLittle= subset(MyData, MyData$NATENVIR == "Too Little")
nrow(TooLittle)
proportionTL = nrow(subset(MyData, MyData$NATENVIR == "Too Little"))/nrow(MyData)
proportionTL
#
# NATENVIR "Too Little" Proportions of Female and Male
#
proportionTLF =nrow(subset(TooLittle, TooLittle$SEX == "Female"))/TotalNumF
proportionTLM =nrow(subset(TooLittle, TooLittle$SEX == " Male"))/TotalNumM
proportionTLF
proportionTLM
MmaleTLMinusPfemalTL= proportionTLM - proportionTLF
MmaleTLMinusPfemalTL
#Calculate Standard Error for "Too Little" response
SETL =sqrt((((proportionTL)*(1-proportionTL))/(TotalNumF))+(((proportionTL)*(1-proportionTL))/(TotalNumM)))
SETL
#Calculate z-Score for "Too Little" response
zscoreTL = (MmaleTLMinusPfemalTL-0)/SETL
zscoreTL
ProbTL = 2*pnorm(-abs(zscoreTL))
ProbTL
#####
# NATENVIR "Too Much" Proportions of Total
TooMuch= subset(MyData, MyData$NATENVIR == "Too much")
nrow(TooMuch)
proportionTM = nrow(subset(MyData, MyData$NATENVIR == "Too much"))/nrow(MyData)
proportionTM
### NATENVIR "Too Much" Proportions of Female and Male
proportionTMF= nrow(subset(TooMuch, TooMuch$SEX == "Female"))/TotalNumF
proportionTMM =nrow(subset(TooMuch, TooMuch$SEX == " Male"))/TotalNumM
proportionTMF
proportionTMM
MmaleTLMinusPfemalTM= proportionTMM - proportionTMF
MmaleTLMinusPfemalTM
#Calculate Standard Error for "Too Much" Response
SETM =sqrt((((proportionTM)*(1-proportionTM))/(TotalNumF))+(((proportionTM)*(1-proportionTM))/(TotalNumM)))
SETM
#Calculate z-Score for "Too Much" Response
zscoreTM = (MmaleTLMinusPfemalTM-0)/SETM
zscoreTM
ProbTM = 2*pnorm(-abs(zscoreTM))
ProbTM
###
# NATENVIR "About Right" Proportions of Total
AboutRight= subset(MyData, MyData$NATENVIR == "About Right")
nrow(AboutRight)
proportionAR = nrow(subset(MyData, MyData$NATENVIR == "About Right"))/nrow(MyData)
proportionAR
# NATENVIR "About Right" Proportions of Female and Male
proportionARF= nrow(subset(AboutRight, AboutRight$SEX == "Female"))/TotalNumF
proportionARM =nrow(subset(AboutRight, AboutRight$SEX == " Male"))/TotalNumM
proportionARF
proportionARM
MmaleTLMinusPfemalAR= proportionARM - proportionARF
MmaleTLMinusPfemalAR
#Calculate Standard Error for "About Right" response
SEAR =sqrt((((proportionAR)*(1-proportionAR))/(TotalNumF))+(((proportionAR)*(1-proportionAR))/(TotalNumM)))
SEAR
#Calculate z-Score for "About Right" response
zscoreAR = (MmaleTLMinusPfemalAR-0)/SEAR
zscoreAR
ProbAR = 2*pnorm(-abs(zscoreAR))
ProbAR
NatenvirNames<- c("Too Little", "About Right", "Too much")
ProportionNames
Results <- read.csv("G:/Data Analysis and Statistical Inference/Project/projectdataCRes.csv",header=TRUE)
Results
###### CHI SQUARE tets
proportion = nrow(subset(MyData, MyData$NATENVIR == "About Right"))/nrow(MyData)
proportion
inference(MyData$NATENVIR, MyData$SEX, est = "proportion", type = "ht", method = "theoretical", success = "maleandfemale")
sample_Data= subset(MyData_Age[1:100])
sample_Data= subset(MyData_Age[1:100], )
sample_Data= subset(MyData_Age[1:100, ])
sample_Data= subset(MyData_Age[1:100, ])
sample_Data
q()
q()
# Load data and Inference Function
load(url("http://s3.amazonaws.com/assets.datacamp.com/course/dasi/inference.Rdata"))
load(url("http://bit.ly/dasi_gss_data"))
# Extract Sex, Natenvir, and Age variables from data
NATENVIR=gss$natenvir
SEX=gss$sex
AGE=gss$age
#Read data from file
MyData <- read.csv("G:/Data Analysis and Statistical Inference/Project/projectdatamodNoNa.csv",header=TRUE)
MyData_Age <- read.csv("G:/Data Analysis and Statistical Inference/Project/projectdatamodage.csv",header=TRUE)
sample_Data= subset(MyData_Age[1:50, ])
sample_Data
#Take the subset of Too Little Response for females
TLittle =subset(MyData, MyData$NATENVIR == "Too Little")
TLittleFemale= subset(TLittle, TLittle$SEX == "Female")
# Calculate the proportion of females from the 'TLittle' subset:
proportionF = nrow(TLittleFemale)/nrow(TLittle)
proportionF
#
#Take the subset of Too Little Response for males
TLittle =subset(MyData, MyData$NATENVIR == "Too Little")
TLittleMale= subset(TLittle, TLittle$SEX == " Male")
# Calculate the proportion of males from the 'TLittle' subset:
proportionM = nrow(TLittleMale)/nrow(TLittle)
proportionM
#Age data summary
summary(MyData_Age$AGE)
# Proportion test
table(MyData$NATENVIR, MyData$SEX)
prop.test(table(MyData$NATENVIR, MyData$SEX), correct=FALSE)
levels(MyData$NATENVIR)
levels(MyData$SEX)
# Subset data by NATENVIR
TooLittle= subset(MyData, MyData$NATENVIR == "Too Little")
TooMuch= subset(MyData, MyData$NATENVIR == "Too much")
AboutRight= subset(MyData, MyData$NATENVIR == "About Right")
head(TooLittle)
# Number of Females
FemaleNumberTL= nrow(subset(TooLittle, TooLittle$SEX == "Female"))
FemaleNumberTM= nrow(subset(TooMuch, TooMuch$SEX == "Female"))
FemaleNumberAR=nrow(subset(AboutRight, AboutRight$SEX == "Female"))
TotalNumF= FemaleNumberTL + FemaleNumberTM + FemaleNumberAR
TotalNumF
# Number of Males
MaleNumberTL= nrow(subset(TooLittle, TooLittle$SEX == " Male"))
MaleNumberTL
MaleNumberTM= nrow(subset(TooMuch, TooMuch$SEX == " Male"))
MaleNumberAR=nrow(subset(AboutRight, AboutRight$SEX == " Male"))
TotalNumM= MaleNumberTL + MaleNumberTM + MaleNumberAR
TotalNumM
# NATENVIR "Too Little" Proportions of Total
TooLittle= subset(MyData, MyData$NATENVIR == "Too Little")
nrow(TooLittle)
proportionTL = nrow(subset(MyData, MyData$NATENVIR == "Too Little"))/nrow(MyData)
proportionTL
#
# NATENVIR "Too Little" Proportions of Female and Male
#
proportionTLF =nrow(subset(TooLittle, TooLittle$SEX == "Female"))/TotalNumF
proportionTLM =nrow(subset(TooLittle, TooLittle$SEX == " Male"))/TotalNumM
proportionTLF
proportionTLM
MmaleTLMinusPfemalTL= proportionTLM - proportionTLF
MmaleTLMinusPfemalTL
#Calculate Standard Error for "Too Little" response
SETL =sqrt((((proportionTL)*(1-proportionTL))/(TotalNumF))+(((proportionTL)*(1-proportionTL))/(TotalNumM)))
SETL
#Calculate z-Score for "Too Little" response
zscoreTL = (MmaleTLMinusPfemalTL-0)/SETL
zscoreTL
ProbTL = 2*pnorm(-abs(zscoreTL))
ProbTL
#####
# NATENVIR "Too Much" Proportions of Total
TooMuch= subset(MyData, MyData$NATENVIR == "Too much")
nrow(TooMuch)
proportionTM = nrow(subset(MyData, MyData$NATENVIR == "Too much"))/nrow(MyData)
proportionTM
### NATENVIR "Too Much" Proportions of Female and Male
proportionTMF= nrow(subset(TooMuch, TooMuch$SEX == "Female"))/TotalNumF
proportionTMM =nrow(subset(TooMuch, TooMuch$SEX == " Male"))/TotalNumM
proportionTMF
proportionTMM
MmaleTLMinusPfemalTM= proportionTMM - proportionTMF
MmaleTLMinusPfemalTM
#Calculate Standard Error for "Too Much" Response
SETM =sqrt((((proportionTM)*(1-proportionTM))/(TotalNumF))+(((proportionTM)*(1-proportionTM))/(TotalNumM)))
SETM
#Calculate z-Score for "Too Much" Response
zscoreTM = (MmaleTLMinusPfemalTM-0)/SETM
zscoreTM
ProbTM = 2*pnorm(-abs(zscoreTM))
ProbTM
###
# NATENVIR "About Right" Proportions of Total
AboutRight= subset(MyData, MyData$NATENVIR == "About Right")
nrow(AboutRight)
proportionAR = nrow(subset(MyData, MyData$NATENVIR == "About Right"))/nrow(MyData)
proportionAR
# NATENVIR "About Right" Proportions of Female and Male
proportionARF= nrow(subset(AboutRight, AboutRight$SEX == "Female"))/TotalNumF
proportionARM =nrow(subset(AboutRight, AboutRight$SEX == " Male"))/TotalNumM
proportionARF
proportionARM
MmaleTLMinusPfemalAR= proportionARM - proportionARF
MmaleTLMinusPfemalAR
#Calculate Standard Error for "About Right" response
SEAR =sqrt((((proportionAR)*(1-proportionAR))/(TotalNumF))+(((proportionAR)*(1-proportionAR))/(TotalNumM)))
SEAR
#Calculate z-Score for "About Right" response
zscoreAR = (MmaleTLMinusPfemalAR-0)/SEAR
zscoreAR
ProbAR = 2*pnorm(-abs(zscoreAR))
ProbAR
## Read results of the hypothesis test for two proportion from a file
Results <- read.csv("G:/Data Analysis and Statistical Inference/Project/projectdataCRes.csv",header=TRUE)
Results
###### CHI SQUARE test
proportion = nrow(subset(MyData, MyData$NATENVIR == "About Right"))/nrow(MyData)
proportion
inference(MyData$NATENVIR, MyData$SEX, est = "proportion", type = "ht", method = "theoretical", success = "maleandfemale")
# This program is used for a project to determint assosiation between gender and  perception
# government spending on environmental protection
# Load data and Inference Function
load(url("http://s3.amazonaws.com/assets.datacamp.com/course/dasi/inference.Rdata"))
load(url("http://bit.ly/dasi_gss_data"))
# Extract Sex, Natenvir, and Age variables from data
NATENVIR=gss$natenvir
SEX=gss$sex
AGE=gss$age
#Read data from file
MyData <- read.csv("G:/Data Analysis and Statistical Inference/Project/projectdatamodNoNa.csv",header=TRUE)
MyData_Age <- read.csv("G:/Data Analysis and Statistical Inference/Project/projectdatamodage.csv",header=TRUE)
sample_Data= subset(MyData_Age[1:50, ])
sample_Data
#Take the subset of Too Little Response for females
TLittle =subset(MyData, MyData$NATENVIR == "Too Little")
TLittleFemale= subset(TLittle, TLittle$SEX == "Female")
# Calculate the proportion of females from the 'TLittle' subset:
proportionF = nrow(TLittleFemale)/nrow(TLittle)
proportionF
#
#Take the subset of Too Little Response for males
TLittle =subset(MyData, MyData$NATENVIR == "Too Little")
TLittleMale= subset(TLittle, TLittle$SEX == " Male")
# Calculate the proportion of males from the 'TLittle' subset:
proportionM = nrow(TLittleMale)/nrow(TLittle)
proportionM
#Age data summary
summary(MyData_Age$AGE)
# Proportion test
table(MyData$NATENVIR, MyData$SEX)
prop.test(table(MyData$NATENVIR, MyData$SEX), correct=FALSE)
levels(MyData$NATENVIR)
levels(MyData$SEX)
# Subset data by NATENVIR
TooLittle= subset(MyData, MyData$NATENVIR == "Too Little")
TooMuch= subset(MyData, MyData$NATENVIR == "Too much")
AboutRight= subset(MyData, MyData$NATENVIR == "About Right")
# Number of Females
FemaleNumberTL= nrow(subset(TooLittle, TooLittle$SEX == "Female"))
FemaleNumberTM= nrow(subset(TooMuch, TooMuch$SEX == "Female"))
FemaleNumberAR=nrow(subset(AboutRight, AboutRight$SEX == "Female"))
TotalNumF= FemaleNumberTL + FemaleNumberTM + FemaleNumberAR
TotalNumF
# Number of Males
MaleNumberTL= nrow(subset(TooLittle, TooLittle$SEX == " Male"))
MaleNumberTL
MaleNumberTM= nrow(subset(TooMuch, TooMuch$SEX == " Male"))
MaleNumberAR=nrow(subset(AboutRight, AboutRight$SEX == " Male"))
TotalNumM= MaleNumberTL + MaleNumberTM + MaleNumberAR
TotalNumM
# NATENVIR "Too Little" Proportions of Total
TooLittle= subset(MyData, MyData$NATENVIR == "Too Little")
nrow(TooLittle)
proportionTL = nrow(subset(MyData, MyData$NATENVIR == "Too Little"))/nrow(MyData)
proportionTL
# NATENVIR "Too Little" Proportions of Female and Male
proportionTLF =nrow(subset(TooLittle, TooLittle$SEX == "Female"))/TotalNumF
proportionTLM =nrow(subset(TooLittle, TooLittle$SEX == " Male"))/TotalNumM
proportionTLF
proportionTLM
MmaleTLMinusPfemalTL= proportionTLM - proportionTLF
MmaleTLMinusPfemalTL
#Calculate Standard Error for "Too Little" response
SETL =sqrt((((proportionTL)*(1-proportionTL))/(TotalNumF))+(((proportionTL)*(1-proportionTL))/(TotalNumM)))
SETL
#Calculate z-Score for "Too Little" response
zscoreTL = (MmaleTLMinusPfemalTL-0)/SETL
zscoreTL
ProbTL = 2*pnorm(-abs(zscoreTL))
ProbTL
# NATENVIR "Too Much" Proportions of Total
TooMuch= subset(MyData, MyData$NATENVIR == "Too much")
nrow(TooMuch)
proportionTM = nrow(subset(MyData, MyData$NATENVIR == "Too much"))/nrow(MyData)
proportionTM
### NATENVIR "Too Much" Proportions of Female and Male
proportionTMF= nrow(subset(TooMuch, TooMuch$SEX == "Female"))/TotalNumF
proportionTMM =nrow(subset(TooMuch, TooMuch$SEX == " Male"))/TotalNumM
proportionTMF
proportionTMM
MmaleTLMinusPfemalTM= proportionTMM - proportionTMF
MmaleTLMinusPfemalTM
#Calculate Standard Error for "Too Much" Response
SETM =sqrt((((proportionTM)*(1-proportionTM))/(TotalNumF))+(((proportionTM)*(1-proportionTM))/(TotalNumM)))
SETM
#Calculate z-Score for "Too Much" Response
zscoreTM = (MmaleTLMinusPfemalTM-0)/SETM
zscoreTM
ProbTM = 2*pnorm(-abs(zscoreTM))
ProbTM
# NATENVIR "About Right" Proportions of Total
AboutRight= subset(MyData, MyData$NATENVIR == "About Right")
nrow(AboutRight)
proportionAR = nrow(subset(MyData, MyData$NATENVIR == "About Right"))/nrow(MyData)
proportionAR
# NATENVIR "About Right" Proportions of Female and Male
proportionARF= nrow(subset(AboutRight, AboutRight$SEX == "Female"))/TotalNumF
proportionARM =nrow(subset(AboutRight, AboutRight$SEX == " Male"))/TotalNumM
proportionARF
proportionARM
MmaleTLMinusPfemalAR= proportionARM - proportionARF
MmaleTLMinusPfemalAR
#Calculate Standard Error for "About Right" response
SEAR =sqrt((((proportionAR)*(1-proportionAR))/(TotalNumF))+(((proportionAR)*(1-proportionAR))/(TotalNumM)))
SEAR
#Calculate z-Score for "About Right" response
zscoreAR = (MmaleTLMinusPfemalAR-0)/SEAR
zscoreAR
ProbAR = 2*pnorm(-abs(zscoreAR))
ProbAR
## Read results of the hypothesis test for two proportion from a file
Results <- read.csv("G:/Data Analysis and Statistical Inference/Project/projectdataCRes.csv",header=TRUE)
Results
###### CHI SQUARE test
proportion = nrow(subset(MyData, MyData$NATENVIR == "About Right"))/nrow(MyData)
proportion
inference(MyData$NATENVIR, MyData$SEX, est = "proportion", type = "ht", method = "theoretical", success = "maleandfemale")
q()
install.packages("httpuv")
install.packages("jsonlite")
content(req)
library(httr)
# 1. Find OAuth settings for github:
# http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
# Insert your values below - if secret is omitted, it will look it up in
# the GITHUB_CONSUMER_SECRET environmental variable.
#
# Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "15899fcfa2faa394b5a4", secret="c9f5e10cd81c32abfad25bb4d002739ffffd9785")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
json1 =content(req)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
req
name(req)
names(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
# http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
# Insert your values below - if secret is omitted, it will look it up in
# the GITHUB_CONSUMER_SECRET environmental variable.
#
# Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "15899fcfa2faa394b5a4", secret="c9f5e10cd81c32abfad25bb4d002739ffffd9785")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
# http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
# Insert your values below - if secret is omitted, it will look it up in
# the GITHUB_CONSUMER_SECRET environmental variable.
#
# Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "15899fcfa2faa394b5a4", secret="c9f5e10cd81c32abfad25bb4d002739ffffd9785")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
content(req)
json1=content(req)
jsaon2= jsaonlite::fromJSON(toJSON(json1))
json2= jsonlite::fromJSON(toJSON(json1))
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(content(req)))
json2$created
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(content(req)))
library(jsonlite)
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(content(req)))
json2[]
names(json2)
json2$created_at
json2[1, 1:4]
json2[1, 1:10]
json2 $name
json2$name
json2$created_at[1, 4]
json2$created_at[]
json2$created_at[4]
json2$name[4]
x<-c(json2$name,json2$created_at)
head(x)
x
head(x)
x<-cbind(json2$name,json2$created_at)
head(x)
library(jsonlite)
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(content(req)))
x<-cbind(json2$name,json2$created_at)
stop_for_status(req)
content(req)
head(x)
sp <- sqrt((7 * 15.34^2 + 20 * 18.23^2) / (8 + 21 - 2))
sp
132.86 - 127.44 + c(-1, 1) * qt(.975, 27) * sp * (1 / 8 + 1 / 21)^.5
binom(8, p=0.5)
bin(8, p=0.5)
q()
# Reproducible Research: Peer Assessment 1
apply(x[1], 2, mean))
meanSteps <- ddply(activityDataClean, c("interval"), function(x) apply(x[1], 2, mean)
meanSteps <- ddply(activityDataClean, c("interval"), function(x) apply(x[1], 2, mean))
```
meanSteps <- ddply(activityDataClean, c("interval"), function(x) apply(x[1], 2, mean))
# Reproducible Research: Peer Assessment 1
# Reproducible research, May 2014 - Peer Assessed Assignment 1
# Reproducible Research: Peer Assessment 1
This includes changing the class of the variable 'steps' and 'interval' to be Numeric and cleaning data by removing NAs.
```{r echo = TRUE}
```
sum(is.na(activityData$date))  # dates with NA
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
